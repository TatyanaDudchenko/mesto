{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto/./src/components/Api.js","webpack://mesto/./src/components/Card.js","webpack://mesto/./src/components/FormValidator.js","webpack://mesto/./src/components/Section.js","webpack://mesto/./src/components/Popup.js","webpack://mesto/./src/components/PopupWithImage.js","webpack://mesto/./src/components/PopupWithForm.js","webpack://mesto/./src/components/PopupWithСonfirm.js","webpack://mesto/./src/components/UserInfo.js","webpack://mesto/./src/utils/constants.js","webpack://mesto/./src/pages/index.js"],"sourcesContent":["class Api {\n  constructor({baseUrl, token}) {\n    this.baseUrl = baseUrl;\n    this.token = token;\n  }\n\n  _handleResult() {\n\n  }\n\n  // метод для загрузки информации о пользователе с сервера\n  getUserData() {\n  return fetch(`${this.baseUrl}/users/me`, {\n    headers: {\n      authorization: `${this.token}`,\n    }\n  })\n    .then(result => {\n      if (result.ok) {\n        return result.json();\n      }\n\n      return Promise.reject(`Ошибка при загрузке информации о пользователе: ${result.status}`);\n    })\n\n  }\n\n  // метод для загрузки начальных карточек с сервера\n  getInitialCards() {\n  return fetch(`${this.baseUrl}/cards`, {\n    headers: {\n      authorization: `${this.token}`,\n    }\n  })\n    .then(result => {\n      if (result.ok) {\n        return result.json();\n      }\n\n      return Promise.reject(`Ошибка при загрузке начальных карточек: ${result.status}`);\n    })\n\n  }\n\n  // метод для редактирования профиля\n  editProfile(data) {\n    return fetch(`${this.baseUrl}/users/me`, {\n    method: 'PATCH',\n    headers: {\n      authorization: `${this.token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: data.name,\n      about: data.about\n    })\n  })\n    .then(result => {\n      if (result.ok) {\n        return result.json();\n      }\n\n      return Promise.reject(`Ошибка при редактировании профиля: ${result.status}`);\n    })\n\n  }\n\n  // метод для добавления новой карточки\n  createNewCard(data) {\n    return fetch(`${this.baseUrl}/cards`, {\n    method: 'POST',\n    headers: {\n      authorization: `${this.token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: data.name,\n      link: data.link,\n    })\n  })\n    .then(result => {\n      if (result.ok) {\n        return result.json();\n      }\n\n      return Promise.reject(`Ошибка при добавлении новой карточки: ${result.status}`);\n    })\n\n  }\n\n  // метод для удаления карточки\n  deleteCard(itemId) {\n    return fetch(`${this.baseUrl}/cards/${itemId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `${this.token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      _id: itemId,\n    })\n  })\n    .then(result => {\n      if (result.ok) {\n        return result.json();\n      }\n\n      return Promise.reject(`Ошибка при удалении карточки: ${result.status}`);\n    })\n\n  }\n\n  // метод для постановки лайка\n  putLike(itemId) {\n    return fetch(`${this.baseUrl}/cards/${itemId}/likes`, {\n    method: 'PUT',\n    headers: {\n      authorization: `${this.token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      _id: itemId,\n    })\n  })\n    .then(result => {\n      if (result.ok) {\n        return result.json();\n      }\n\n      return Promise.reject(`Ошибка при постановке лайка: ${result.status}`);\n    })\n\n  }\n\n  // метод для удаления лайка\n  deleteLike(itemId) {\n    return fetch(`${this.baseUrl}/cards/${itemId}/likes`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `${this.token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      _id: itemId,\n    })\n  })\n    .then(result => {\n      if (result.ok) {\n        return result.json();\n      }\n\n      return Promise.reject(`Ошибка при удалении лайка: ${result.status}`);\n    })\n\n  }\n\n   // метод для обновления аватара пользователя\n   updatedAvatar(avatarData) {\n    return fetch(`${this.baseUrl}/users/me/avatar`, {\n    method: 'PATCH',\n    headers: {\n      authorization: `${this.token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      avatar: avatarData.link\n    })\n  })\n    .then(result => {\n      if (result.ok) {\n        return result.json();\n      }\n\n      return Promise.reject(`Ошибка при обновлении аватара пользователя: ${result.status}`);\n    })\n\n  }\n\n\n}\n\nexport default Api\n\n","const settingsObjectCard = {\n  cardSelector: '.card',\n  likeButtonSelector: '.card__icon-like',\n  trashButtonSelector: '.card__icon-trash',\n  likeButtonActiveClass: 'card__icon-like_active',\n  cardImageSelector: '.card__image',\n  cardTitleSelector: '.card__text',\n  likeSelector: '.card__counter-like'\n}\n\nclass Card {\n  constructor(cardData, templateSelector, handleCardClick, handleCardDelete, handlePutLike, handleDeleteLike, userData) {\n    this._item = cardData;\n    this._title = cardData.name;\n    this._image = cardData.link;\n    this._templateSelector = templateSelector;\n    this._handleCardClick = handleCardClick;\n    this._handleCardDelete = handleCardDelete;\n    this._handlePutLike = handlePutLike;\n    this._handleDeleteLike = handleDeleteLike;\n    this._userDataId = userData._id; // id текущего пользователя\n    this._ownerId = cardData.owner._id; // id владельца карточки\n    this._itemId = cardData._id // id карточки\n    this._likesInitialCounter(this._item);\n    this._likesInitialView(this._item);\n  }\n\n  _getTemplate(settingsObject) {\n    const cardItem = document\n    .querySelector(this._templateSelector)\n    .content\n    .querySelector(settingsObject.cardSelector)\n    .cloneNode(true);\n\n    return cardItem;\n  }\n\n  _setEventListeners(settingsObject) {\n\n    // Выбираем в карточке элемент Картинка\n    // Cлушатель картинки для открытия попапа просмотра картинки\n    this._cardImage = this._item.querySelector(settingsObject.cardImageSelector);\n    this._cardImage.addEventListener('click', () => {\n      this._handleOpenPopup()\n    });\n\n    // Выбираем в карточке элемент кнопка Лайк\n    // Слушатель кнопки Лайк\n    this._likeButton = this._item.querySelector(settingsObject.likeButtonSelector);\n    this._likeButton.addEventListener('click', () => {\n      this._handleLikeButton(this._itemId)\n    });\n\n    // Выбираем в карточке элемент кнопка Урна\n    this._trashButton = this._item.querySelector(settingsObject.trashButtonSelector);\n    // проверяем, есть ли на карточке элемент иконки удаления\n    if (this._trashButton) {\n      // Слушатель кнопки Урна\n      this._trashButton.addEventListener('click', () => {\n        this._handleCardDelete(this._itemId) //вызвали обработчик, открывющий форму подтверждения и удаляющий карточку при сабмите формы\n      });\n    }\n\n  }\n\n  // Метод-обработчик для открытия попапа просмотра картинки\n  _handleOpenPopup() {\n    this._handleCardClick({\n      name: this._title,\n      link: this._image\n    });\n  }\n\n  _toggleLike() {\n    this._likeButton.classList.toggle(settingsObjectCard.likeButtonActiveClass);\n  }\n\n  // Метод-обработчик кнопки Лайк\n  _handleLikeButton() {\n\n    // выбираем нужный обработчик лайка\n    if (this._likeButton.classList.contains(settingsObjectCard.likeButtonActiveClass)) {\n      this._handleDeleteLike(this._itemId) // обработчик удаления лайка, содержащий Api запрос\n      this._toggleLike();\n\n    } else {\n      this._handlePutLike(this._itemId) // обработчик постановки лайка, содержащий Api запрос\n      this._toggleLike();\n\n    }\n  }\n\n  likesCounter(updatedCardData) {\n    this._arrayLikesLength = updatedCardData.likes.length;\n    this._item.querySelector(settingsObjectCard.likeSelector).textContent = this._arrayLikesLength;\n  }\n\n\n  _likesInitialCounter(updatedCardData) {\n    this._arrayLikesLength = updatedCardData.likes.length;\n  }\n\n  _likesInitialView(updatedCardData) {\n    this._arrayLikes = updatedCardData.likes;\n  }\n\n  _renderInitialLikes() {\n    this._item.querySelector(settingsObjectCard.likeSelector).textContent = this._arrayLikesLength;\n  }\n\n  // Метод-обработчик кнопки Урна\n  _handleTrashButton() {\n    this._item.remove(this._itemId);\n  }\n\n  deleteCard() {\n    this._handleTrashButton(this._itemId); // вызываем метод удаления карточки\n  }\n\n  createCard() {\n\n    this._item = this._getTemplate(settingsObjectCard);\n    this._setEventListeners(settingsObjectCard);\n\n\n    this._cardImage.src = this._image;\n    this._item.querySelector(settingsObjectCard.cardTitleSelector).textContent = this._title;\n    this._cardImage.alt = this._title;\n\n    this._renderInitialLikes();\n\n\n    // проверяем совпадают ли id пользователей, если нет, то убираем кнопку Урна с карточки\n    if (this._ownerId !== this._userDataId) {\n      this._trashButton.remove();\n      this._trashButton = null;\n    }\n\n    // окрашиваем лайки в черный цвет только на своих карточках\n    const data = this._arrayLikes.find(({_id}) => _id === this._userDataId);\n    if (data) {\n      this._likeButton.classList.add(settingsObjectCard.likeButtonActiveClass);\n    } else {\n      this._likeButton.classList.remove(settingsObjectCard.likeButtonActiveClass);\n    }\n\n    return this._item;\n\n  }\n\n}\n\nexport default Card;\n\n","class FormValidator {\r\n  constructor(settingsObject, formElement) {\r\n    this._settingsObject = settingsObject; // settingsObject {...}\r\n    this._formElement = formElement;\r\n    // Находим все поля ввода\r\n    this._inputList = Array.from(this._formElement.querySelectorAll(this._settingsObject.inputSelector));\r\n    // Находим кнопку отправки формы\r\n    this._buttonElement = this._formElement.querySelector(this._settingsObject.submitButtonSelector);\r\n  };\r\n\r\n  enableValidation() {\r\n    this._setEventListeners();\r\n  };\r\n\r\n  _setEventListeners() {\r\n    // Предварительно деактивируем кнопку отправки формы, прежде чем ее начнут заполнять, путем запуска функции переключения состояния кнопки перед обработчиком событий ввода\r\n    this._toggleButtonState();\r\n\r\n    // Запускаем обработчик событий ввода с запуском функций, отвечающих за валидность вводимых элементов и состояние кнопки отправки\r\n    this._inputList.forEach((inputElement) => {\r\n      inputElement.addEventListener('input', () => {\r\n        this._checkInputValidity(inputElement);\r\n\r\n        this._toggleButtonState();\r\n      });\r\n    });\r\n\r\n    // Устанавливаем на форму слушатель по событию отправки формы\r\n    this._formElement.addEventListener('submit', (evt) => {\r\n      evt.preventDefault();\r\n    });\r\n  };\r\n\r\n  // Метод для очистки ошибок в полях ввода и управления кнопкой отправки\r\n  resetValidation() {\r\n    this._toggleButtonState();\r\n\r\n    this._inputList.forEach((inputElement) => {\r\n      this._hideInputError(inputElement);\r\n    });\r\n\r\n  }\r\n\r\n  // Метод показа ошибки ввода\r\n  _showInputError(inputElement, errorMessage) {\r\n    // Находим элемент сообщения об ошибке по уникальному классу\r\n    const errorElement = this._formElement.querySelector(`.${inputElement.id}-error`);\r\n    // Добавляем полю ввода класс показа ошибки ввода\r\n    inputElement.classList.add(this._settingsObject.inputErrorClass);\r\n    // Передаем значение ошибки в текстовое значение элемента сообщения об ошибке\r\n    errorElement.textContent = errorMessage;\r\n    // Добавляем элементу сообщения об ошибке активизирующий его класс\r\n    errorElement.classList.add(this._settingsObject.errorClass);\r\n  };\r\n\r\n  // Метод скрытия ошибки ввода\r\n  _hideInputError(inputElement) {\r\n    // Находим элемент сообщения об ошибке по уникальному классу\r\n    const errorElement = this._formElement.querySelector(`.${inputElement.id}-error`);\r\n    // Удаляем у поля ввода класс показа ошибки ввода\r\n    inputElement.classList.remove(this._settingsObject.inputErrorClass);\r\n    // Удаляем у элемента сообщения об ошибке активизирующий его класс\r\n    errorElement.classList.remove(this._settingsObject.errorClass);\r\n    // Очищаем текстовое значение элемента сообщения об ошибке\r\n    errorElement.textContent = '';\r\n  };\r\n\r\n  // Метод проверки на валидность элемента, вводимого в поле ввода\r\n  _checkInputValidity(inputElement) {\r\n    if (!inputElement.validity.valid) {\r\n      this._showInputError(inputElement, inputElement.validationMessage);\r\n    } else {\r\n      this._hideInputError(inputElement);\r\n    }\r\n  };\r\n\r\n  // Метод проверки на наличие хотя бы одного невалидного поля в форме\r\n  _hasInvalidInput() {\r\n    return this._inputList.some((inputElement) => {\r\n      return !inputElement.validity.valid;\r\n    });\r\n  };\r\n\r\n  // Метод переключения состояния кнопки отправки формы\r\n  _toggleButtonState() {\r\n    if (this._hasInvalidInput()) {\r\n      this._buttonElement.classList.add(this._settingsObject.inactiveButtonClass);\r\n      this._buttonElement.setAttribute('disabled', true);\r\n    } else {\r\n      this._buttonElement.classList.remove(this._settingsObject.inactiveButtonClass);\r\n      this._buttonElement.removeAttribute('disabled');\r\n    };\r\n  };\r\n\r\n}\r\n\r\nexport default FormValidator;\r\n","class Section {\n  constructor({ renderer }, containerSelector) {\n    this._renderer = renderer;\n    this._container = document.querySelector(containerSelector);\n  }\n\n  renderItem(items, userData) {\n\n    const reversedItems = items.reverse();\n\n    reversedItems.forEach((item) => {\n      this._renderer(item, userData);\n    });\n  }\n\n  addItem(item) {\n    this._container.prepend(item);\n  }\n\n}\n\nexport default Section;\n","class Popup {\n  constructor(popupSelector) {\n    this._element = document.querySelector(popupSelector);\n    this._closePopupButton = this._element.querySelector('.popup__icon-close');\n    this._handleEscClose = this._handleEscClose.bind(this)\n  }\n\n  open() {\n    this._element.classList.add('popup_opened');\n    document.addEventListener('keydown', this._handleEscClose);\n  }\n\n  close() {\n    this._element.classList.remove('popup_opened');\n    document.removeEventListener('keydown', this._handleEscClose);\n  }\n\n  _handleEscClose(evt) {\n    if (evt.key === 'Escape') {\n      this.close(evt);\n    };\n  }\n\n  setEventListeners() {\n    this._closePopupButton.addEventListener('click', (evt) => {\n      this.close(evt)\n    });\n\n    this._element.addEventListener('click', (evt) => {\n        if (evt.target.classList.contains('popup_opened')) {\n        this.close(evt.target);\n      };\n    });\n\n  }\n\n}\n\nexport default Popup;\n","import Popup from \"./Popup.js\";\r\n\r\nclass PopupWithImage extends Popup {\r\n  constructor(popupSelector) {\r\n    super(popupSelector)\r\n\r\n    this._imageIsOpened = this._element.querySelector('.popup__image-is-opened');\r\n    this._descriptionIsOpened = this._element.querySelector('.popup__description-is-opened');\r\n  }\r\n\r\n  open(data) {\r\n    this._imageIsOpened.src = data.link;\r\n    this._imageIsOpened.alt = data.name;\r\n    this._descriptionIsOpened.textContent = data.name;\r\n    super.open();\r\n  }\r\n\r\n}\r\n\r\nexport default PopupWithImage;\r\n","import Popup from \"./Popup.js\";\n\nclass PopupWithForm extends Popup {\n  constructor(popupSelector, hanldeFormSubmit) {\n    super(popupSelector)\n\n    this._form = this._element.querySelector('.popup__form');\n    this._inputs = this._form.querySelectorAll('.popup__input');\n    this.hanldeFormSubmit = hanldeFormSubmit;\n    this._submitButton = this._form.querySelector('.popup__button');\n  }\n\n  _getInputValues() {\n\n    const res = {};\n\n    for (let input of this._inputs) {\n      res [input.name] = input.value;\n    };\n\n    return res;\n  }\n\n  setEventListeners() {\n    super.setEventListeners();\n    this._form.addEventListener('submit', (evt) => {\n    evt.preventDefault();\n      const data = this._getInputValues();\n      this.hanldeFormSubmit(data);\n      this.close(evt);\n    });\n\n  }\n\n  close() {\n    super.close();\n    this._form.reset();\n  }\n\n  loading(submitButtonText) {\n    this._submitButton.textContent = submitButtonText;\n  }\n\n\n}\nexport default PopupWithForm;\n","import PopupWithForm from \"./PopupWithForm.js\";\n\nclass PopupWithСonfirm extends PopupWithForm {\n  constructor(popupSelector, hanldeFormSubmit) {\n    super(popupSelector, hanldeFormSubmit)\n  }\n\n  setSubmitHandler(functionDeleteCard) {\n    this.hanldeFormSubmit = functionDeleteCard;\n  }\n\n}\nexport default PopupWithСonfirm;","class UserInfo {\n  constructor(configUserInfo, userId) {\n    this._profileName = document.querySelector(configUserInfo.nameItemSelector);\n    this._profileJob = document.querySelector(configUserInfo.jobItemSelector);\n    this._profileAvatar = document.querySelector(configUserInfo.avatarItemSelector);\n  }\n\n  getUserInfo() {\n    const userData = {\n      name: this._name,\n      about: this._about,\n      _id: this._id,\n    }\n\n    return userData;\n\n  }\n\n  setUserInfo(userData) {\n  if (userData) {\n      this._id = userData._id;\n      this._name = userData.name;\n      this._about = userData.about;\n      this._renderUserInfo();\n    }\n  }\n\n  _renderUserInfo() {\n    this._profileName.textContent = this._name;\n    this._profileJob.textContent = this._about;\n  }\n\n\n  setAvatar(userData) {\n  if (userData) {\n      this._id = userData._id;\n      this._avatar = userData.avatar;\n      this._renderAvatar();\n    }\n  }\n\n  _renderAvatar() {\n    this._profileAvatar.src = this._avatar;\n  }\n\n}\n\nexport default UserInfo;\n\n\n","// Объявляем объект настроек валидации\nexport const settingsObjectMesto = {\n  formSelector: '.popup__form',\n  inputSelector: '.popup__input',\n  submitButtonSelector: '.popup__button',\n  inactiveButtonClass: 'popup__button_disabled',\n  inputErrorClass: 'popup__input_type_error',\n  errorClass: 'popup__error_visible'\n};\n\n// Выбираем в документе галерею, которая будет заполняться карточками\nexport const gallerySelector = '.gallery';\n\n// Выбираем элементы попапы\nexport const editPopup = document.querySelector('.popup_type_edit');\nexport const addPopup = document.querySelector('.popup_type_add');\nexport const editAvatarPopup = document.querySelector('.popup_type_edit-avatar');\n\n// Выбираем кнопки открытия попапов\nexport const openEditPopupButton = document.querySelector('.profile__button-edit');\nexport const openAddPopupButton = document.querySelector('.profile-container__button-add');\nexport const openEditAvatarPopupButton = document.querySelector('.profile__button-edit-avatar');\n\n// Выбираем элемент Форма редактирования профиля\nconst formEditPopup = editPopup.querySelector('.popup__container');\n// Выбираем поле редактирования ввода Имя\nexport const nameInput = formEditPopup.querySelector('.popup__input_name');\n// Выбираем поле редактирования ввода Деятельность\nexport const jobInput = formEditPopup.querySelector('.popup__input_job');\n","import Api from '../components/Api.js';\nimport '../pages/index.css';\nimport Card from '../components/Card.js';\nimport FormValidator from '../components/FormValidator.js';\nimport Section from '../components/Section.js';\nimport PopupWithImage from '../components/PopupWithImage.js';\nimport PopupWithForm from '../components/PopupWithForm.js';\nimport PopupWithСonfirm from '../components/PopupWithСonfirm.js';\nimport UserInfo from '../components/UserInfo.js';\n\nimport { settingsObjectMesto, gallerySelector, editPopup, addPopup, editAvatarPopup, openEditPopupButton, openAddPopupButton, openEditAvatarPopupButton, nameInput, jobInput } from '../utils/constants';\n\n\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-32',\n  token: '00d03ff0-290d-430c-82a1-6d959f58942a',\n});\n\nlet currentUserData;\n\nPromise.all([api.getUserData(), api.getInitialCards()])\n  .then(([userData, items]) => {\n    profileUserInfo.setUserInfo(userData);\n    profileUserInfo.setAvatar(userData);\n    cardList.renderItem(items, userData);\n    currentUserData = userData;\n  })\n\n\n// Создаем экземпляр попапа с формой подтверждения\nconst confirmForm = new PopupWithСonfirm(\n  '.popup_type_confirm',\n  function deleteCard(item) {\n    api.deleteCard(item)\n    .then(result => item.deleteCard(result))\n  }\n  )\nconfirmForm.setEventListeners();\n\n\n// Функция создания карточки\nconst createCard = (item, currentUserData) => {\n  const cardElement = new Card(\n    item,\n    '.template-card',\n    hanldeOpenImageForm,\n\n    function handleCardDelete(itemId) {\n      confirmForm.open();\n      confirmForm.setSubmitHandler(function deleteCard() {\n        api.deleteCard(itemId)\n        .then(result => cardElement.deleteCard(result))\n      });\n    },\n\n    function handlePutLike(itemId) {\n      api.putLike(itemId)\n      .then(result => cardElement.likesCounter(result))\n    },\n\n    function handleDeleteLike(itemId) {\n      api.deleteLike(itemId)\n      .then(result => cardElement.likesCounter(result))\n    },\n\n    currentUserData\n  );\n  return cardElement.createCard(); // отрисовываем карточку\n}\n\n\n// Создаем экземпляр контейнера для карточек\nconst cardList = new Section({\n  renderer: (item, currentUserData) => {\n    cardList.addItem(createCard(item, currentUserData));\n  }\n}, gallerySelector)\n\n\n// Создаем экземпляр попапа с формой добавления\nconst formAdd = new PopupWithForm(\n  '.popup_type_add',\n\n    function hanldeNewCardFormSubmit(data) {\n      formAdd.loading('Сохранение...')\n      api.createNewCard(data)\n      .then(result => cardList.addItem(createCard(result, currentUserData)))\n      .finally(() => formAdd.loading('Сохранить'))\n    }\n\n)\nformAdd.setEventListeners();\n\n\n\n// Создаем экземпляр попапа с формой редактирования профиля\nconst formEdit = new PopupWithForm(\n  '.popup_type_edit',\n\n    function hanldeEditFormSubmit(userData) {\n      formEdit.loading('Сохранение...')\n      api.editProfile(userData)\n      .then(result => profileUserInfo.setUserInfo(result))\n      .finally(() => formEdit.loading('Сохранить'))\n    }\n\n)\nformEdit.setEventListeners();\n\n// Создаем экземпляр попапа с формой редактирования аватара\nconst formEditAvatar = new PopupWithForm(\n  '.popup_type_edit-avatar',\n\n    function hanldeEditAvatarFormSubmit(avatarData) {\n      formEditAvatar.loading('Сохранение...')\n      api.updatedAvatar(avatarData)\n      .then(result => profileUserInfo.setAvatar(result))\n      .finally(() => formEditAvatar.loading('Сохранить'))\n    }\n\n)\nformEditAvatar.setEventListeners();\n\n\n// Создаем экземпляр попапа просмотра картинки\nconst imageViewPopup = new PopupWithImage('.popup_type_img');\nimageViewPopup.setEventListeners();\n\n\n// Создаем объект и экземпляр класса с данными пользователя\nconst configUserInfo = {\n  nameItemSelector: '.profile__name',\n  jobItemSelector: '.profile__job',\n  avatarItemSelector: '.profile__avatar'\n}\nconst profileUserInfo = new UserInfo(configUserInfo);\n\n\n// Объявляем функцию открытия попапа редактирования\nfunction openEditPopup() {\n\n  // Формируем объект с данными пользователя\n  const {name, about} = profileUserInfo.getUserInfo();\n\n  // Предарительно обновляем поля ввода\n  nameInput.value = name;\n  jobInput.value = about;\n\n  // Предварительно очищаем ошибки валидации и деактивируем кнопку отправки формы\n  editPopupValidator.resetValidation();\n  // Открываем попап\n  formEdit.open();\n};\n// Передаем в обработчик ссылку на функцию открытия попапа редактирования по клику кнопки Редактировать\nopenEditPopupButton.addEventListener('click', openEditPopup);\n\n// Объявляем функцию открытия попапа добавления\nfunction openAddPopup() {\n\n  // Предварительно очищаем ошибки валидации и деактивируем кнопку отправки формы\n  addPopupValidator.resetValidation();\n  // Открываем попап\n  formAdd.open();\n};\n// Передаем в обработчик ссылку на функцию открытия попапа добавления по клику кнопки Добавить\nopenAddPopupButton.addEventListener('click', openAddPopup);\n\n\n// Объявляем функцию открытия попапа редактирования аватара\nfunction openEditAvatarPopup() {\n\n  // Предварительно очищаем ошибки валидации и деактивируем кнопку отправки формы\n  editAvatarPopupValidator.resetValidation();\n  // Открываем попап\n  formEditAvatar.open();\n};\n// Передаем в обработчик ссылку на функцию открытия попапа добавления по клику кнопки Редактировать аватар\nopenEditAvatarPopupButton.addEventListener('click', openEditAvatarPopup);\n\n\n// Обработчик формы для просмотра картинки\nfunction hanldeOpenImageForm(data) {\n\n  //Вызываем функцию открытия попапа Просмотр картинки\n  imageViewPopup.open(data);\n}\n\nconst editPopupValidator = new FormValidator(settingsObjectMesto, editPopup);\neditPopupValidator.enableValidation();\n\nconst addPopupValidator = new FormValidator(settingsObjectMesto, addPopup);\naddPopupValidator.enableValidation();\n\nconst editAvatarPopupValidator = new FormValidator(settingsObjectMesto, editAvatarPopup);\neditAvatarPopupValidator.enableValidation();\n"],"names":["Api","baseUrl","token","this","fetch","headers","authorization","then","result","ok","json","Promise","reject","status","data","method","body","JSON","stringify","name","about","link","itemId","_id","avatarData","avatar","settingsObjectCard","cardSelector","likeButtonSelector","trashButtonSelector","likeButtonActiveClass","cardImageSelector","cardTitleSelector","likeSelector","Card","cardData","templateSelector","handleCardClick","handleCardDelete","handlePutLike","handleDeleteLike","userData","_item","_title","_image","_templateSelector","_handleCardClick","_handleCardDelete","_handlePutLike","_handleDeleteLike","_userDataId","_ownerId","owner","_itemId","_likesInitialCounter","_likesInitialView","settingsObject","document","querySelector","content","cloneNode","_cardImage","addEventListener","_handleOpenPopup","_likeButton","_handleLikeButton","_trashButton","classList","toggle","contains","_toggleLike","updatedCardData","_arrayLikesLength","likes","length","textContent","_arrayLikes","remove","_handleTrashButton","_getTemplate","_setEventListeners","src","alt","_renderInitialLikes","find","add","FormValidator","formElement","_settingsObject","_formElement","_inputList","Array","from","querySelectorAll","inputSelector","_buttonElement","submitButtonSelector","_toggleButtonState","forEach","inputElement","_checkInputValidity","evt","preventDefault","_hideInputError","errorMessage","errorElement","id","inputErrorClass","errorClass","validity","valid","_showInputError","validationMessage","some","_hasInvalidInput","inactiveButtonClass","setAttribute","removeAttribute","Section","containerSelector","renderer","_renderer","_container","items","reverse","item","prepend","Popup","popupSelector","_element","_closePopupButton","_handleEscClose","bind","removeEventListener","key","close","target","PopupWithImage","_imageIsOpened","_descriptionIsOpened","PopupWithForm","hanldeFormSubmit","_form","_inputs","_submitButton","res","input","value","_getInputValues","reset","submitButtonText","PopupWithСonfirm","functionDeleteCard","UserInfo","configUserInfo","userId","_profileName","nameItemSelector","_profileJob","jobItemSelector","_profileAvatar","avatarItemSelector","_name","_about","_renderUserInfo","_avatar","_renderAvatar","settingsObjectMesto","formSelector","editPopup","addPopup","editAvatarPopup","openEditPopupButton","openAddPopupButton","openEditAvatarPopupButton","formEditPopup","nameInput","jobInput","currentUserData","api","all","getUserData","getInitialCards","profileUserInfo","setUserInfo","setAvatar","cardList","renderItem","confirmForm","deleteCard","setEventListeners","createCard","cardElement","hanldeOpenImageForm","open","setSubmitHandler","putLike","likesCounter","deleteLike","addItem","formAdd","loading","createNewCard","finally","formEdit","editProfile","formEditAvatar","updatedAvatar","imageViewPopup","getUserInfo","editPopupValidator","resetValidation","addPopupValidator","editAvatarPopupValidator","enableValidation"],"sourceRoot":""}