{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto/./src/components/Api.js","webpack://mesto/./src/components/Card.js","webpack://mesto/./src/components/FormValidator.js","webpack://mesto/./src/components/Section.js","webpack://mesto/./src/components/Popup.js","webpack://mesto/./src/components/PopupWithImage.js","webpack://mesto/./src/components/PopupWithForm.js","webpack://mesto/./src/components/PopupWithСonfirm.js","webpack://mesto/./src/components/UserInfo.js","webpack://mesto/./src/utils/constants.js","webpack://mesto/./src/pages/index.js"],"sourcesContent":["class Api {\n  constructor({baseUrl, token}) {\n    this.baseUrl = baseUrl;\n    this.token = token;\n  }\n\n  _handleResult() {\n\n  }\n\n  // метод для загрузки информации о пользователе с сервера\n  getUserData() {\n  return fetch(`${this.baseUrl}/users/me`, {\n    headers: {\n      authorization: `${this.token}`,\n    }\n  })\n    .then(result => {\n      if (result.ok) {\n        return result.json();\n      }\n\n      return Promise.reject(`Ошибка при загрузке информации о пользователе: ${result.status}`);\n    })\n\n  }\n\n  // метод для загрузки начальных карточек с сервера\n  getInitialCards() {\n  return fetch(`${this.baseUrl}/cards`, {\n    headers: {\n      authorization: `${this.token}`,\n    }\n  })\n    .then(result => {\n      if (result.ok) {\n        return result.json();\n      }\n\n      return Promise.reject(`Ошибка при загрузке начальных карточек: ${result.status}`);\n    })\n\n  }\n\n  // метод для редактирования профиля\n  editProfile(data) {\n    return fetch(`${this.baseUrl}/users/me`, {\n    method: 'PATCH',\n    headers: {\n      authorization: `${this.token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: data.name,\n      about: data.about\n    })\n  })\n    .then(result => {\n      if (result.ok) {\n        return result.json();\n      }\n\n      return Promise.reject(`Ошибка при редактировании профиля: ${result.status}`);\n    })\n\n  }\n\n  // метод для добавления новой карточки\n  createNewCard(data) {\n    return fetch(`${this.baseUrl}/cards`, {\n    method: 'POST',\n    headers: {\n      authorization: `${this.token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: data.name,\n      link: data.link,\n    })\n  })\n    .then(result => {\n      if (result.ok) {\n        return result.json();\n      }\n\n      return Promise.reject(`Ошибка при добавлении новой карточки: ${result.status}`);\n    })\n\n  }\n\n  // метод для удаления карточки\n  deleteCard(itemId) {\n    return fetch(`${this.baseUrl}/cards/${itemId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `${this.token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      _id: itemId,\n    })\n  })\n    .then(result => {\n      if (result.ok) {\n        return result.json;\n      }\n\n      return Promise.reject(`Ошибка при удалении карточки: ${result.status}`);\n    })\n\n  }\n\n  // метод для постановки лайка\n  putLike(itemId) {\n    return fetch(`${this.baseUrl}/cards/${itemId}/likes`, {\n    method: 'PUT',\n    headers: {\n      authorization: `${this.token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      likes: [],\n    })\n  })\n    .then(result => {\n      if (result.ok) {\n        return result.json;\n      }\n\n      return Promise.reject(`Ошибка при постановке лайка: ${result.status}`);\n    })\n\n  }\n\n  // метод для удаления лайка\n  deleteLike(itemId) {\n    return fetch(`${this.baseUrl}/cards/${itemId}/likes`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `${this.token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      likes: [],\n    })\n  })\n    .then(result => {\n      if (result.ok) {\n        return result.json;\n      }\n\n      return Promise.reject(`Ошибка при удалении лайка: ${result.status}`);\n    })\n\n  }\n\n    // метод для удаления лайка\n    getLike(item) {\n      return fetch(`${this.baseUrl}/cards/${item._id}/likes`, {\n      method: 'GET',\n      headers: {\n        authorization: `${this.token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        likes: [],\n      })\n    })\n      .then(result => {\n        if (result.ok) {\n          return result.json;\n        }\n\n        return Promise.reject(`Ошибка при получении информации о лайках: ${result.status}`);\n      })\n\n    }\n\n\n\n}\n\nexport default Api\n\n","import Api from \"./Api\";\n\nconst settingsObjectCard = {\n  cardSelector: '.card',\n  likeButtonSelector: '.card__icon-like',\n  trashButtonSelector: '.card__icon-trash',\n  likeButtonActiveClass: 'card__icon-like_active',\n  cardImageSelector: '.card__image',\n  cardTitleSelector: '.card__text',\n  likeSelector: '.card__counter-like'\n}\n\nclass Card {\n  constructor(cardData, templateSelector, handleCardClick, handleCardDelete, handlePutLike, handleDeleteLike, userData) {\n    this._item = cardData;\n    this._title = cardData.name;\n    this._image = cardData.link;\n    this._templateSelector = templateSelector;\n    this._handleCardClick = handleCardClick;\n    this._handleCardDelete = handleCardDelete;\n    this._handlePutLike = handlePutLike;\n    this._handleDeleteLike = handleDeleteLike;\n    this._userDataId = userData._id; // id текущего пользователя\n    this._ownerId = cardData.owner._id; // id владельца карточки\n    this._itemId = cardData._id // id карточки\n\n  }\n\n  _getTemplate(settingsObject) {\n    const cardItem = document\n    .querySelector(this._templateSelector)\n    .content\n    .querySelector(settingsObject.cardSelector)\n    .cloneNode(true);\n\n    return cardItem;\n  }\n\n  _setEventListeners(settingsObject) {\n\n    // Выбираем в карточке элемент Картинка\n    // Cлушатель картинки для открытия попапа просмотра картинки\n    this._cardImage = this._item.querySelector(settingsObject.cardImageSelector);\n    this._cardImage.addEventListener('click', () => {\n      this._handleOpenPopup()\n    });\n\n    // Выбираем в карточке элемент кнопка Лайк\n    // Слушатель кнопки Лайк\n    this._likeButton = this._item.querySelector(settingsObject.likeButtonSelector);\n    this._likeButton.addEventListener('click', () => {\n      this._handleLikeButton(this._itemId)\n    });\n\n    // Выбираем в карточке элемент кнопка Урна\n    this._trashButton = this._item.querySelector(settingsObject.trashButtonSelector);\n    // проверяем, есть ли на карточке элемент иконки удаления\n    if (this._trashButton) {\n      // Слушатель кнопки Урна\n      this._trashButton.addEventListener('click', () => {\n        this._handleCardDelete(this._itemId) //вызвали обработчик, открывющий форму подтверждения и удаляющий карточку при сабмите формы\n      });\n    }\n\n  }\n\n  // Метод-обработчик для открытия попапа просмотра картинки\n  _handleOpenPopup() {\n    this._handleCardClick({\n      name: this._title, // проверить не дублирование кода ли это (см. в index.js function hanldeOpenImageForm(data) эти же данные скорей всего передаются по data)\n      link: this._image\n    });\n  }\n\n  _toggleLike() {\n    this._likeButton.classList.toggle(settingsObjectCard.likeButtonActiveClass);\n  }\n\n  // Метод-обработчик кнопки Лайк\n  _handleLikeButton() {\n\n    // выбираем нужный обработчик лайка\n    if (this._likeButton.classList.contains(settingsObjectCard.likeButtonActiveClass)) {\n      this._handleDeleteLike(this._itemId) // обработчик удаления лайка, содержащий Api запрос\n      this._toggleLike();\n    } else {\n      this._handlePutLike(this._itemId) // обработчик постановки лайка, содержащий Api запрос\n      this._toggleLike();\n    }\n  }\n\n  likesCounter(arrayLikesLength) {\n    this._counter = arrayLikesLength;\n\n    this._renderLikes(this._counter);\n  }\n\n  renderLikes() {\n    this._likes = document.querySelector(settingsObjectCard.likeSelector);\n    this._likes.textContent = this._counter;\n  }\n\n  // Метод-обработчик кнопки Урна\n  _handleTrashButton() {\n    this._item.remove(this._itemId);\n  }\n\n  deleteCard() {\n    this._handleTrashButton(this._itemId); // вызываем метод удаления карточки\n  }\n\n  createCard() {\n\n    this._item = this._getTemplate(settingsObjectCard);\n    this._setEventListeners(settingsObjectCard);\n\n    // this._link = data.link;\n    // this._name = data.name\n\n    this._cardImage.src = this._image;\n    this._item.querySelector(settingsObjectCard.cardTitleSelector).textContent = this._title;\n    this._cardImage.alt = this._title;\n\n\n    // проверяем совпадают ли id пользователей, если нет, то убираем кнопку Урна с карточки\n    if (this._ownerId !== this._userDataId) {\n      this._trashButton.remove();\n      this._trashButton = null;\n    }\n\n    return this._item;\n\n\n  }\n\n}\n\nexport default Card;\n\n// const settingsObjectCard = {\n//   cardSelector: '.card',\n//   likeButtonSelector: '.card__icon-like',\n//   trashButtonSelector: '.card__icon-trash',\n//   likeButtonActiveClass: 'card__icon-like_active',\n//   cardImageSelector: '.card__image',\n//   cardTitleSelector: '.card__text'\n// }\n\n// class Card {\n//   constructor(cardData, templateSelector, handleCardClick) {\n//     this._title = cardData.name;\n//     this._image = cardData.link;\n//     this._templateSelector = templateSelector;\n//     this._handleCardClick = handleCardClick;\n//   }\n\n//   _getTemplate(settingsObject) {\n//     const cardItem = document\n//     .querySelector(this._templateSelector)\n//     .content\n//     .querySelector(settingsObject.cardSelector)\n//     .cloneNode(true);\n\n//     return cardItem;\n//   }\n\n//   _setEventListeners(settingsObject) {\n\n//     // Выбираем в карточке элемент Картинка\n//     // Cлушатель картинки для открытия попапа просмотра картинки\n//     this._cardImage = this._item.querySelector(settingsObject.cardImageSelector);\n//     this._cardImage.addEventListener('click', () => {\n//       this._handleOpenPopup()\n//     });\n\n//     // Выбираем в карточке элемент кнопка Лайк\n//     // Слушатель кнопки Лайк\n//     this._likeButton = this._item.querySelector(settingsObject.likeButtonSelector);\n//     this._likeButton.addEventListener('click', () => {\n//       this._handleLikeButton()\n//     });\n\n//     // Выбираем в карточке элемент кнопка Урна\n//     // Слушатель кнопки Урна\n//     this._trashButton = this._item.querySelector(settingsObject.trashButtonSelector);\n//     this._trashButton.addEventListener('click', () => {\n//       this._handleTrashButton()\n//     });\n\n//   }\n\n//   // Метод-обработчик для открытия попапа просмотра картинки\n//   _handleOpenPopup() {\n//     this._handleCardClick({\n//       name: this._title,\n//       link: this._image\n//     });\n//   }\n\n//   // Метод-обработчик кнопки Лайк\n//   _handleLikeButton() {\n//     this._likeButton.classList.toggle(settingsObjectCard.likeButtonActiveClass);\n//   }\n\n//   // Метод-обработчик кнопки Урна\n//   _handleTrashButton() {\n//     this._item.remove();\n//   }\n\n//   createCard() {\n//     this._item = this._getTemplate(settingsObjectCard);\n//     this._setEventListeners(settingsObjectCard);\n\n//     this._cardImage.src = this._image;\n//     this._item.querySelector(settingsObjectCard.cardTitleSelector).textContent = this._title;\n//     this._cardImage.alt = this._title;\n\n//     return this._item;\n//   }\n\n// }\n\n// export default Card;\n","class FormValidator {\r\n  constructor(settingsObject, formElement) {\r\n    this._settingsObject = settingsObject; // settingsObject {...}\r\n    this._formElement = formElement;\r\n    // Находим все поля ввода\r\n    this._inputList = Array.from(this._formElement.querySelectorAll(this._settingsObject.inputSelector));\r\n    // Находим кнопку отправки формы\r\n    this._buttonElement = this._formElement.querySelector(this._settingsObject.submitButtonSelector);\r\n  };\r\n\r\n  enableValidation() {\r\n    this._setEventListeners();\r\n  };\r\n\r\n  _setEventListeners() {\r\n    // Предварительно деактивируем кнопку отправки формы, прежде чем ее начнут заполнять, путем запуска функции переключения состояния кнопки перед обработчиком событий ввода\r\n    this._toggleButtonState();\r\n\r\n    // Запускаем обработчик событий ввода с запуском функций, отвечающих за валидность вводимых элементов и состояние кнопки отправки\r\n    this._inputList.forEach((inputElement) => {\r\n      inputElement.addEventListener('input', () => {\r\n        this._checkInputValidity(inputElement);\r\n\r\n        this._toggleButtonState();\r\n      });\r\n    });\r\n\r\n    // Устанавливаем на форму слушатель по событию отправки формы\r\n    this._formElement.addEventListener('submit', (evt) => {\r\n      evt.preventDefault();\r\n    });\r\n  };\r\n\r\n  // Метод для очистки ошибок в полях ввода и управления кнопкой отправки\r\n  resetValidation() {\r\n    this._toggleButtonState();\r\n\r\n    this._inputList.forEach((inputElement) => {\r\n      this._hideInputError(inputElement);\r\n    });\r\n\r\n  }\r\n\r\n  // Метод показа ошибки ввода\r\n  _showInputError(inputElement, errorMessage) {\r\n    // Находим элемент сообщения об ошибке по уникальному классу\r\n    const errorElement = this._formElement.querySelector(`.${inputElement.id}-error`);\r\n    // Добавляем полю ввода класс показа ошибки ввода\r\n    inputElement.classList.add(this._settingsObject.inputErrorClass);\r\n    // Передаем значение ошибки в текстовое значение элемента сообщения об ошибке\r\n    errorElement.textContent = errorMessage;\r\n    // Добавляем элементу сообщения об ошибке активизирующий его класс\r\n    errorElement.classList.add(this._settingsObject.errorClass);\r\n  };\r\n\r\n  // Метод скрытия ошибки ввода\r\n  _hideInputError(inputElement) {\r\n    // Находим элемент сообщения об ошибке по уникальному классу\r\n    const errorElement = this._formElement.querySelector(`.${inputElement.id}-error`);\r\n    // Удаляем у поля ввода класс показа ошибки ввода\r\n    inputElement.classList.remove(this._settingsObject.inputErrorClass);\r\n    // Удаляем у элемента сообщения об ошибке активизирующий его класс\r\n    errorElement.classList.remove(this._settingsObject.errorClass);\r\n    // Очищаем текстовое значение элемента сообщения об ошибке\r\n    errorElement.textContent = '';\r\n  };\r\n\r\n  // Метод проверки на валидность элемента, вводимого в поле ввода\r\n  _checkInputValidity(inputElement) {\r\n    if (!inputElement.validity.valid) {\r\n      this._showInputError(inputElement, inputElement.validationMessage);\r\n    } else {\r\n      this._hideInputError(inputElement);\r\n    }\r\n  };\r\n\r\n  // Метод проверки на наличие хотя бы одного невалидного поля в форме\r\n  _hasInvalidInput() {\r\n    return this._inputList.some((inputElement) => {\r\n      return !inputElement.validity.valid;\r\n    });\r\n  };\r\n\r\n  // Метод переключения состояния кнопки отправки формы\r\n  _toggleButtonState() {\r\n    if (this._hasInvalidInput()) {\r\n      this._buttonElement.classList.add(this._settingsObject.inactiveButtonClass);\r\n      this._buttonElement.setAttribute('disabled', true);\r\n    } else {\r\n      this._buttonElement.classList.remove(this._settingsObject.inactiveButtonClass);\r\n      this._buttonElement.removeAttribute('disabled');\r\n    };\r\n  };\r\n\r\n}\r\n\r\nexport default FormValidator;\r\n","class Section {\n  constructor({ renderer }, containerSelector) {\n    this._renderer = renderer;\n    this._container = document.querySelector(containerSelector);\n  }\n\n  renderItem(items, userData) {\n\n    const reversedItems = items.reverse();\n\n    reversedItems.forEach((item) => {\n      this._renderer(item, userData);\n    });\n  }\n\n  addItem(item) {\n    this._container.prepend(item);\n  }\n\n}\n\nexport default Section;\n","class Popup {\r\n  constructor(popupSelector) {\r\n    this._element = document.querySelector(popupSelector);\r\n    this._closePopupButton = this._element.querySelector('.popup__icon-close');\r\n    this._handleEscClose = this._handleEscClose.bind(this)\r\n  }\r\n\r\n  open() {\r\n    this._element.classList.add('popup_opened');\r\n    document.addEventListener('keydown', this._handleEscClose);\r\n  }\r\n\r\n  close() {\r\n    this._element.classList.remove('popup_opened');\r\n    document.removeEventListener('keydown', this._handleEscClose);\r\n  }\r\n\r\n  _handleEscClose(evt) {\r\n    if (evt.key === 'Escape') {\r\n      this.close(evt);\r\n    };\r\n  }\r\n\r\n  setEventListeners() {\r\n    this._closePopupButton.addEventListener('click', (evt) => {\r\n      this.close(evt)\r\n    });\r\n\r\n    this._element.addEventListener('click', (evt) => {\r\n        if (evt.target.classList.contains('popup_opened')) {\r\n        this.close(evt.target);\r\n      };\r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default Popup;\r\n","import Popup from \"./Popup.js\";\r\n\r\nclass PopupWithImage extends Popup {\r\n  constructor(popupSelector) {\r\n    super(popupSelector)\r\n\r\n    this._imageIsOpened = this._element.querySelector('.popup__image-is-opened');\r\n    this._descriptionIsOpened = this._element.querySelector('.popup__description-is-opened');\r\n  }\r\n\r\n  open(data) {\r\n    this._imageIsOpened.src = data.link;\r\n    this._imageIsOpened.alt = data.name;\r\n    this._descriptionIsOpened.textContent = data.name;\r\n    super.open();\r\n  }\r\n\r\n}\r\n\r\nexport default PopupWithImage;\r\n","import Popup from \"./Popup.js\";\n\nclass PopupWithForm extends Popup {\n  constructor(popupSelector, hanldeFormSubmit) {\n    super(popupSelector)\n\n    this._form = this._element.querySelector('.popup__form');\n    this._inputs = this._form.querySelectorAll('.popup__input');\n    this.hanldeFormSubmit = hanldeFormSubmit;\n\n  }\n\n  _getInputValues() {\n\n    const res = {};\n\n    for (let input of this._inputs) {\n      res [input.name] = input.value;\n    };\n\n    return res;\n  }\n\n  setEventListeners() {\n    super.setEventListeners();\n    this._form.addEventListener('submit', (evt) => {\n    evt.preventDefault();\n      const data = this._getInputValues();\n      this.hanldeFormSubmit(data);\n      this.close(evt);\n    });\n\n  }\n\n  close() {\n    super.close();\n    this._form.reset();\n  }\n\n}\nexport default PopupWithForm;\n","import PopupWithForm from \"./PopupWithForm.js\";\n\nclass PopupWithСonfirm extends PopupWithForm {\n  constructor(popupSelector, hanldeFormSubmit) {\n    super(popupSelector, hanldeFormSubmit)\n  }\n\n  setSubmitHandler(functionDeleteCard) {\n    this.hanldeFormSubmit = functionDeleteCard;\n  }\n\n}\nexport default PopupWithСonfirm;\n\n\n// import PopupWithForm from \"./PopupWithForm.js\";\n\n// class PopupWithСonfirm extends PopupWithForm {\n//   constructor(popupSelector, hanldeFormSubmit) {\n//     super(popupSelector, hanldeFormSubmit)\n//   }\n\n//   setSubmitHandler(functionDeleteCard) {\n//     this._submit = functionDeleteCard;\n//   }\n\n// }\n// export default PopupWithСonfirm;\n","class UserInfo {\n  constructor(configUserInfo, userId) {\n    this._profileName = document.querySelector(configUserInfo.nameItemSelector);\n    this._profileJob = document.querySelector(configUserInfo.jobItemSelector);\n  }\n\n  getUserInfo() {\n    const userData = {\n      name: this._name,\n      about: this._about,\n      _id: this._id\n    }\n\n    return userData;\n\n  }\n\n  setUserInfo(userData) {\n  if (userData) {\n      this._name = userData.name;\n      this._about = userData.about;\n      this._id = userData._id;\n      this._renderUserInfo();\n    }\n\n  }\n\n  _renderUserInfo() {\n    this._profileName.textContent = this._name;\n    this._profileJob.textContent = this._about;\n  }\n\n}\n\nexport default UserInfo;\n\n\n\n\n// class UserInfo {\n//   constructor(configUserInfo) {\n//     this._profileName = document.querySelector(configUserInfo.nameItemSelector);\n//     this._profileJob = document.querySelector(configUserInfo.jobItemSelector);\n//   }\n\n//   getUserInfo() {\n\n//     const userData = {\n//       name: this._profileName.textContent,\n//       job: this._profileJob.textContent\n//     }\n\n//     return userData;\n//   }\n\n//   setUserInfo(userData) {\n//     this._profileName.textContent = userData.name;\n//     this._profileJob.textContent = userData.job;\n//   }\n\n// }\n\n\n","// Объявляем объект настроек валидации\nexport const settingsObjectMesto = {\n  formSelector: '.popup__form',\n  inputSelector: '.popup__input',\n  submitButtonSelector: '.popup__button',\n  inactiveButtonClass: 'popup__button_disabled',\n  inputErrorClass: 'popup__input_type_error',\n  errorClass: 'popup__error_visible'\n};\n\n// Массив для добавления начальных карточек\nexport const initialCards = [\n  {\n    name: 'Морская звезда',\n    link: 'https://images.unsplash.com/photo-1610981263015-ef95481e9ffb?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MzN8fHN0YXJmaXNofGVufDB8fDB8fA%3D%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'\n  },\n  {\n    name: 'Рыбы',\n    link: 'https://images.unsplash.com/photo-1611833767698-7a8a336761db?ixid=MnwxMjA3fDB8MHxzZWFyY2h8NzN8fGNvcmFsfGVufDB8fDB8fA%3D%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'\n  },\n  {\n    name: 'Медуза',\n    link: 'https://images.unsplash.com/photo-1549741501-4211de5d3757?ixid=MnwxMjA3fDB8MHxzZWFyY2h8NDl8fGplbGx5ZmlzaHxlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'\n  },\n  {\n    name: 'Кораллы',\n    link: 'https://images.unsplash.com/photo-1589308945435-38c3f99b3824?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTA2fHxjb3JhbHxlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'\n  },\n  {\n    name: 'Океан',\n    link: 'https://images.unsplash.com/photo-1432889490240-84df33d47091?ixid=MnwxMjA3fDB8MHxzZWFyY2h8NTl8fG9jZWFuJTIwbmF0dXJlfGVufDB8fDB8fA%3D%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'\n  },\n  {\n    name: 'Черепаха',\n    link: 'https://images.unsplash.com/photo-1580603474920-aa3332b2c40f?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MjN8fHR1cnRsZXxlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'\n  }\n];\n\n\n// Выбираем в документе галерею, которая будет заполняться карточками\nexport const gallerySelector = '.gallery';\n\n// Выбираем элементы попапы\nexport const сonfirmPopup = document.querySelector('.popup_type_сonfirm');\nexport const editPopup = document.querySelector('.popup_type_edit');\nexport const addPopup = document.querySelector('.popup_type_add');\n\n// Выбираем кнопки открытия попапов\nexport const openEditPopupButton = document.querySelector('.profile__button-edit');\nexport const openAddPopupButton = document.querySelector('.profile-container__button-add');\n\n// Выбираем элемент Форма редактирования\nconst formEditPopup = editPopup.querySelector('.popup__container');\n// Выбираем поле редактирования ввода Имя\nexport const nameInput = formEditPopup.querySelector('.popup__input_name');\n// Выбираем поле редактирования ввода Деятельность\nexport const jobInput = formEditPopup.querySelector('.popup__input_job');\n\n// Выбираем элементы, куда должны быть вставлены значения полей (для редактирования профиля)\nexport const profileName = document.querySelector('.profile__name');\nexport const profileJob = document.querySelector('.profile__job');\n\n// Выбираем элемент Форма добавления новой карточки\nconst formAddPopup = addPopup.querySelector('.popup__container');\n// Выбираем поле ввода добавления новой карточки Название\nexport const titleInput = formAddPopup.querySelector('.popup__input_title');\n// Выбираем поле ввода добавления новой карточки Ссылка\nexport const linkInput = formAddPopup.querySelector('.popup__input_link');\n","import Api from '../components/Api.js';\nimport '../pages/index.css';\nimport Card from '../components/Card.js';\nimport FormValidator from '../components/FormValidator.js';\nimport Section from '../components/Section.js';\nimport PopupWithImage from '../components/PopupWithImage.js';\nimport PopupWithForm from '../components/PopupWithForm.js';\nimport PopupWithСonfirm from '../components/PopupWithСonfirm.js';\nimport UserInfo from '../components/UserInfo.js';\n\nimport { initialCards, settingsObjectMesto, gallerySelector, сonfirmPopup, editPopup, addPopup, openEditPopupButton, openAddPopupButton, nameInput, jobInput, profileName, profileJob, titleInput, linkInput } from '../utils/constants';\nimport Popup from '../components/Popup.js';\n\n// _id: '15e91967d697fa5faaec02f2'\n\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-32',\n  token: '00d03ff0-290d-430c-82a1-6d959f58942a',\n});\n\n// api.getInitialCards()\n//   .then((result) => { // items\n//     cardList.renderItem(result); // items\n//     })\n\n//   .catch((err) => {\n//     console.log('ОШИБКА:', err);\n//   });\n\n// api.getUserData()\n//   .then((result) => { // data\n//     profileUserInfo.setUserInfo(result); // data\n//     })\n\n//   .catch((err) => {\n//     console.log('ОШИБКА:', err);\n//   });\n\nlet currentUserData;\n\nPromise.all([api.getUserData(), api.getInitialCards()])\n  .then(([userData, items]) => {\n    profileUserInfo.setUserInfo(userData)\n    cardList.renderItem(items, userData);\n    currentUserData = userData;\n  })\n\n\n// Создаем экземпляр попапа с формой подтверждения\nconst confirmForm = new PopupWithСonfirm(\n  '.popup_type_confirm',\n  function deleteCard(item) { //(()=>{})\n    api.deleteCard(item)\n    .then(result => item.deleteCard(result))\n  }\n  )\nconfirmForm.setEventListeners();\n\n\n// Функция создания карточки\nconst createCard = (item, currentUserData) => {\n  const cardElement = new Card(\n    item,\n    '.template-card',\n    hanldeOpenImageForm,\n\n    function handleCardDelete(itemId) {\n      confirmForm.open();\n      confirmForm.setSubmitHandler(function deleteCard() { //(()=>{})\n        api.deleteCard(itemId)\n        .then(result => cardElement.deleteCard(result))\n      });\n    },\n\n    function handlePutLike(itemId) {\n      api.putLike(itemId)\n      .then(result => cardElement.likesCounter(getLikeCounter(item)))\n    },\n\n    function handleDeleteLike(itemId) {\n      api.deleteLike(itemId)\n      .then(result => cardElement.likesCounter(getLikeCounter(item)))\n    },\n\n    currentUserData\n  );\n  return cardElement.createCard(); // отрисовываем карточку\n}\n\nfunction getLikeCounter(cardElement) {\n  api.getLike(cardElement)\n  .then(result => { return result.likes.length })\n}\n\n\n// Создаем экземпляр контейнера для карточек\nconst cardList = new Section({\n  renderer: (item, currentUserData) => {\n    cardList.addItem(createCard(item, currentUserData));\n  }\n}, gallerySelector)\n\n\n// Создаем экземпляр попапа с формой добавления\nconst formAdd = new PopupWithForm(\n  '.popup_type_add',\n\n    function hanldeNewCardFormSubmit(data) {\n      api.createNewCard(data)\n      .then(result => cardList.addItem(createCard(result, currentUserData)))\n    }\n\n)\nformAdd.setEventListeners();\n\n\n\n// Создаем экземпляр попапа с формой редактирования\nconst formEdit = new PopupWithForm(\n  '.popup_type_edit',\n\n    function hanldeEditFormSubmit(userData) {\n      api.editProfile(userData)\n      .then(result => profileUserInfo.setUserInfo(result))\n    }\n\n)\nformEdit.setEventListeners();\n\n\n// Создаем экземпляр попапа просмотра картинки\nconst imageViewPopup = new PopupWithImage('.popup_type_img');\nimageViewPopup.setEventListeners();\n\n\n// Создаем объект и экземпляр класса с данными пользователя\nconst configUserInfo = {\n  nameItemSelector: '.profile__name',\n  jobItemSelector: '.profile__job'\n}\nconst profileUserInfo = new UserInfo(configUserInfo);\n\n\n// Объявляем функцию открытия попапа редактирования\nfunction openEditPopup() {\n\n  // Формируем объект с данными пользователя\n  const {name, about} = profileUserInfo.getUserInfo();\n\n  // Предарительно обновляем поля ввода\n  nameInput.value = name;\n  jobInput.value = about;\n\n  // Предварительно очищаем ошибки валидации и деактивируем кнопку отправки формы\n  editPopupValidator.resetValidation();\n  // Открываем попап\n  formEdit.open();\n};\n// Передаем в обработчик ссылку на функцию открытия попапа редактирования по клику кнопки Редактировать\nopenEditPopupButton.addEventListener('click', openEditPopup);\n\n// Объявляем функцию открытия попапа добавления\nfunction openAddPopup() {\n\n  // Предварительно очищаем ошибки валидации и деактивируем кнопку отправки формы\n  addPopupValidator.resetValidation();\n  // Открываем попап\n  formAdd.open();\n};\n// Передаем в обработчик ссылку на функцию открытия попапа добавления по клику кнопки Добавить\nopenAddPopupButton.addEventListener('click', openAddPopup);\n\n\n// Обработчик формы для просмотра картинки\nfunction hanldeOpenImageForm(data) {\n\n  //Вызываем функцию открытия попапа Просмотр картинки\n  imageViewPopup.open(data);\n}\n\nconst editPopupValidator = new FormValidator(settingsObjectMesto, editPopup);\neditPopupValidator.enableValidation();\n\nconst addPopupValidator = new FormValidator(settingsObjectMesto, addPopup);\naddPopupValidator.enableValidation();\n"],"names":["Api","baseUrl","token","this","fetch","headers","authorization","then","result","ok","json","Promise","reject","status","data","method","body","JSON","stringify","name","about","link","itemId","_id","likes","item","settingsObjectCard","cardSelector","likeButtonSelector","trashButtonSelector","likeButtonActiveClass","cardImageSelector","cardTitleSelector","likeSelector","Card","cardData","templateSelector","handleCardClick","handleCardDelete","handlePutLike","handleDeleteLike","userData","_item","_title","_image","_templateSelector","_handleCardClick","_handleCardDelete","_handlePutLike","_handleDeleteLike","_userDataId","_ownerId","owner","_itemId","settingsObject","document","querySelector","content","cloneNode","_cardImage","addEventListener","_handleOpenPopup","_likeButton","_handleLikeButton","_trashButton","classList","toggle","contains","_toggleLike","arrayLikesLength","_counter","_renderLikes","_likes","textContent","remove","_handleTrashButton","_getTemplate","_setEventListeners","src","alt","FormValidator","formElement","_settingsObject","_formElement","_inputList","Array","from","querySelectorAll","inputSelector","_buttonElement","submitButtonSelector","_toggleButtonState","forEach","inputElement","_checkInputValidity","evt","preventDefault","_hideInputError","errorMessage","errorElement","id","add","inputErrorClass","errorClass","validity","valid","_showInputError","validationMessage","some","_hasInvalidInput","inactiveButtonClass","setAttribute","removeAttribute","Section","containerSelector","renderer","_renderer","_container","items","reverse","prepend","Popup","popupSelector","_element","_closePopupButton","_handleEscClose","bind","removeEventListener","key","close","target","PopupWithImage","_imageIsOpened","_descriptionIsOpened","PopupWithForm","hanldeFormSubmit","_form","_inputs","res","input","value","_getInputValues","reset","PopupWithСonfirm","functionDeleteCard","UserInfo","configUserInfo","userId","_profileName","nameItemSelector","_profileJob","jobItemSelector","_name","_about","_renderUserInfo","settingsObjectMesto","formSelector","editPopup","addPopup","openEditPopupButton","openAddPopupButton","formEditPopup","nameInput","jobInput","formAddPopup","currentUserData","api","all","getUserData","getInitialCards","profileUserInfo","setUserInfo","cardList","renderItem","confirmForm","deleteCard","setEventListeners","createCard","cardElement","hanldeOpenImageForm","open","setSubmitHandler","putLike","likesCounter","getLikeCounter","deleteLike","getLike","length","addItem","formAdd","createNewCard","formEdit","editProfile","imageViewPopup","getUserInfo","editPopupValidator","resetValidation","addPopupValidator","enableValidation"],"sourceRoot":""}