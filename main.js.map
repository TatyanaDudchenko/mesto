{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto/./src/components/Api.js","webpack://mesto/./src/components/Card.js","webpack://mesto/./src/components/FormValidator.js","webpack://mesto/./src/components/Section.js","webpack://mesto/./src/components/Popup.js","webpack://mesto/./src/components/PopupWithImage.js","webpack://mesto/./src/components/PopupWithForm.js","webpack://mesto/./src/components/PopupWithСonfirm.js","webpack://mesto/./src/components/UserInfo.js","webpack://mesto/./src/utils/constants.js","webpack://mesto/./src/pages/index.js"],"sourcesContent":["class Api {\n  constructor({baseUrl, token}) {\n    this.baseUrl = baseUrl;\n    this.token = token;\n  }\n\n  _handleResult() {\n\n  }\n\n  // метод для загрузки информации о пользователе с сервера\n  getUserData() {\n  return fetch(`${this.baseUrl}/users/me`, {\n    headers: {\n      authorization: `${this.token}`,\n    }\n  })\n    .then(result => {\n      if (result.ok) {\n        return result.json();\n      }\n\n      return Promise.reject(`Ошибка при загрузке информации о пользователе: ${result.status}`);\n    })\n\n  }\n\n  // метод для загрузки начальных карточек с сервера\n  getInitialCards() {\n  return fetch(`${this.baseUrl}/cards`, {\n    headers: {\n      authorization: `${this.token}`,\n    }\n  })\n    .then(result => {\n      if (result.ok) {\n        return result.json();\n      }\n\n      return Promise.reject(`Ошибка при загрузке начальных карточек: ${result.status}`);\n    })\n\n  }\n\n  // метод для редактирования профиля\n  editProfile(data) {\n    return fetch(`${this.baseUrl}/users/me`, {\n    method: 'PATCH',\n    headers: {\n      authorization: `${this.token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: data.name,\n      about: data.about\n    })\n  })\n    .then(result => {\n      if (result.ok) {\n        return result.json();\n      }\n\n      return Promise.reject(`Ошибка при редактировании профиля: ${result.status}`);\n    })\n\n  }\n\n  // метод для добавления новой карточки\n  createNewCard(data) {\n    return fetch(`${this.baseUrl}/cards`, {\n    method: 'POST',\n    headers: {\n      authorization: `${this.token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: data.name,\n      link: data.link,\n      userData: data._id\n    })\n  })\n    .then(result => {\n      if (result.ok) {\n        return result.json();\n      }\n\n      return Promise.reject(`Ошибка при добавлении новой карточки: ${result.status}`);\n    })\n\n  }\n\n  // метод для удаления карточки\n  deleteCard(item) {\n    return fetch(`${this.baseUrl}/cards/${item._id}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `${this.token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      _id: item._id,\n    })\n  })\n    .then(result => {\n      if (result.ok) {\n        return result.json;\n      }\n\n      return Promise.reject(`Ошибка при удалении карточки: ${result.status}`);\n    })\n\n  }\n\n\n}\n\nexport default Api\n\n","const settingsObjectCard = {\n  cardSelector: '.card',\n  likeButtonSelector: '.card__icon-like',\n  trashButtonSelector: '.card__icon-trash',\n  likeButtonActiveClass: 'card__icon-like_active',\n  cardImageSelector: '.card__image',\n  cardTitleSelector: '.card__text'\n}\n\nclass Card {\n  constructor(cardData, templateSelector, handleCardClick, handleTrashButtonClick, handleCardDelete, userData) {\n    this._item = cardData;\n    this._title = this._item.name;\n    this._image = this._item.link;\n    this._templateSelector = templateSelector;\n    this._handleCardClick = handleCardClick;\n    this._handleTrashButtonClick = handleTrashButtonClick;\n    this._handleCardDelete = handleCardDelete;\n    this._userDataId = userData._id;\n    this._ownerId = cardData.owner._id;\n    this._itemId = cardData._id\n\n  }\n\n  _getTemplate(settingsObject) {\n    const cardItem = document\n    .querySelector(this._templateSelector)\n    .content\n    .querySelector(settingsObject.cardSelector)\n    .cloneNode(true);\n\n    return cardItem;\n  }\n\n  _setEventListeners(settingsObject) {\n\n    // Выбираем в карточке элемент Картинка\n    // Cлушатель картинки для открытия попапа просмотра картинки\n    this._cardImage = this._item.querySelector(settingsObject.cardImageSelector);\n    this._cardImage.addEventListener('click', () => {\n      this._handleOpenPopup()\n    });\n\n    // Выбираем в карточке элемент кнопка Лайк\n    // Слушатель кнопки Лайк\n    this._likeButton = this._item.querySelector(settingsObject.likeButtonSelector);\n    this._likeButton.addEventListener('click', () => {\n      this._handleLikeButton()\n    });\n\n    // Выбираем в карточке элемент кнопка Урна\n    this._trashButton = this._item.querySelector(settingsObject.trashButtonSelector);\n    // проверяем, есть ли на карточке элемент иконки удаления\n    if (this._trashButton) {\n      // Слушатель кнопки Урна\n      this._trashButton.addEventListener('click', () => {\n        this._handleTrashButtonClick(this._itemId) //открыли попап с формой подтверждения\n      });\n    }\n\n  }\n\n  // Метод-обработчик для открытия попапа просмотра картинки\n  _handleOpenPopup() {\n    this._handleCardClick({\n      name: this._title, // проверить не дублирование кода ли это (см. в index.js function hanldeOpenImageForm(data) эти же данные скорей всего передаются по data)\n      link: this._image\n    });\n  }\n\n  // Метод-обработчик кнопки Лайк\n  _handleLikeButton() {\n    this._likeButton.classList.toggle(settingsObjectCard.likeButtonActiveClass);\n  }\n\n  // Метод-обработчик кнопки Урна\n  _handleTrashButton() {\n    this._item.remove(this._itemId);\n    this._handleCardDelete(this._itemId)\n  }\n\n  deleteCard() {\n    this._handleTrashButton(this._itemId); // передаем в функцию удаления карточки результат метода удаления карточки\n  }\n\n  createCard() {\n\n    this._item = this._getTemplate(settingsObjectCard);\n    this._setEventListeners(settingsObjectCard);\n\n    // this._link = data.link;\n    // this._name = data.name\n\n    this._cardImage.src = this._image;\n    this._item.querySelector(settingsObjectCard.cardTitleSelector).textContent = this._title;\n    this._cardImage.alt = this._title;\n\n\n    // проверяем совпадают ли id пользователей, если нет, то убираем кнопку Урна с карточки\n    if (this._ownerId !== this._userDataId) {\n      this._trashButton.remove();\n      this._trashButton = null;\n    }\n\n    return this._item;\n\n\n  }\n\n}\n\nexport default Card;\n\n// const settingsObjectCard = {\n//   cardSelector: '.card',\n//   likeButtonSelector: '.card__icon-like',\n//   trashButtonSelector: '.card__icon-trash',\n//   likeButtonActiveClass: 'card__icon-like_active',\n//   cardImageSelector: '.card__image',\n//   cardTitleSelector: '.card__text'\n// }\n\n// class Card {\n//   constructor(cardData, templateSelector, handleCardClick) {\n//     this._title = cardData.name;\n//     this._image = cardData.link;\n//     this._templateSelector = templateSelector;\n//     this._handleCardClick = handleCardClick;\n//   }\n\n//   _getTemplate(settingsObject) {\n//     const cardItem = document\n//     .querySelector(this._templateSelector)\n//     .content\n//     .querySelector(settingsObject.cardSelector)\n//     .cloneNode(true);\n\n//     return cardItem;\n//   }\n\n//   _setEventListeners(settingsObject) {\n\n//     // Выбираем в карточке элемент Картинка\n//     // Cлушатель картинки для открытия попапа просмотра картинки\n//     this._cardImage = this._item.querySelector(settingsObject.cardImageSelector);\n//     this._cardImage.addEventListener('click', () => {\n//       this._handleOpenPopup()\n//     });\n\n//     // Выбираем в карточке элемент кнопка Лайк\n//     // Слушатель кнопки Лайк\n//     this._likeButton = this._item.querySelector(settingsObject.likeButtonSelector);\n//     this._likeButton.addEventListener('click', () => {\n//       this._handleLikeButton()\n//     });\n\n//     // Выбираем в карточке элемент кнопка Урна\n//     // Слушатель кнопки Урна\n//     this._trashButton = this._item.querySelector(settingsObject.trashButtonSelector);\n//     this._trashButton.addEventListener('click', () => {\n//       this._handleTrashButton()\n//     });\n\n//   }\n\n//   // Метод-обработчик для открытия попапа просмотра картинки\n//   _handleOpenPopup() {\n//     this._handleCardClick({\n//       name: this._title,\n//       link: this._image\n//     });\n//   }\n\n//   // Метод-обработчик кнопки Лайк\n//   _handleLikeButton() {\n//     this._likeButton.classList.toggle(settingsObjectCard.likeButtonActiveClass);\n//   }\n\n//   // Метод-обработчик кнопки Урна\n//   _handleTrashButton() {\n//     this._item.remove();\n//   }\n\n//   createCard() {\n//     this._item = this._getTemplate(settingsObjectCard);\n//     this._setEventListeners(settingsObjectCard);\n\n//     this._cardImage.src = this._image;\n//     this._item.querySelector(settingsObjectCard.cardTitleSelector).textContent = this._title;\n//     this._cardImage.alt = this._title;\n\n//     return this._item;\n//   }\n\n// }\n\n// export default Card;\n","class FormValidator {\r\n  constructor(settingsObject, formElement) {\r\n    this._settingsObject = settingsObject; // settingsObject {...}\r\n    this._formElement = formElement;\r\n    // Находим все поля ввода\r\n    this._inputList = Array.from(this._formElement.querySelectorAll(this._settingsObject.inputSelector));\r\n    // Находим кнопку отправки формы\r\n    this._buttonElement = this._formElement.querySelector(this._settingsObject.submitButtonSelector);\r\n  };\r\n\r\n  enableValidation() {\r\n    this._setEventListeners();\r\n  };\r\n\r\n  _setEventListeners() {\r\n    // Предварительно деактивируем кнопку отправки формы, прежде чем ее начнут заполнять, путем запуска функции переключения состояния кнопки перед обработчиком событий ввода\r\n    this._toggleButtonState();\r\n\r\n    // Запускаем обработчик событий ввода с запуском функций, отвечающих за валидность вводимых элементов и состояние кнопки отправки\r\n    this._inputList.forEach((inputElement) => {\r\n      inputElement.addEventListener('input', () => {\r\n        this._checkInputValidity(inputElement);\r\n\r\n        this._toggleButtonState();\r\n      });\r\n    });\r\n\r\n    // Устанавливаем на форму слушатель по событию отправки формы\r\n    this._formElement.addEventListener('submit', (evt) => {\r\n      evt.preventDefault();\r\n    });\r\n  };\r\n\r\n  // Метод для очистки ошибок в полях ввода и управления кнопкой отправки\r\n  resetValidation() {\r\n    this._toggleButtonState();\r\n\r\n    this._inputList.forEach((inputElement) => {\r\n      this._hideInputError(inputElement);\r\n    });\r\n\r\n  }\r\n\r\n  // Метод показа ошибки ввода\r\n  _showInputError(inputElement, errorMessage) {\r\n    // Находим элемент сообщения об ошибке по уникальному классу\r\n    const errorElement = this._formElement.querySelector(`.${inputElement.id}-error`);\r\n    // Добавляем полю ввода класс показа ошибки ввода\r\n    inputElement.classList.add(this._settingsObject.inputErrorClass);\r\n    // Передаем значение ошибки в текстовое значение элемента сообщения об ошибке\r\n    errorElement.textContent = errorMessage;\r\n    // Добавляем элементу сообщения об ошибке активизирующий его класс\r\n    errorElement.classList.add(this._settingsObject.errorClass);\r\n  };\r\n\r\n  // Метод скрытия ошибки ввода\r\n  _hideInputError(inputElement) {\r\n    // Находим элемент сообщения об ошибке по уникальному классу\r\n    const errorElement = this._formElement.querySelector(`.${inputElement.id}-error`);\r\n    // Удаляем у поля ввода класс показа ошибки ввода\r\n    inputElement.classList.remove(this._settingsObject.inputErrorClass);\r\n    // Удаляем у элемента сообщения об ошибке активизирующий его класс\r\n    errorElement.classList.remove(this._settingsObject.errorClass);\r\n    // Очищаем текстовое значение элемента сообщения об ошибке\r\n    errorElement.textContent = '';\r\n  };\r\n\r\n  // Метод проверки на валидность элемента, вводимого в поле ввода\r\n  _checkInputValidity(inputElement) {\r\n    if (!inputElement.validity.valid) {\r\n      this._showInputError(inputElement, inputElement.validationMessage);\r\n    } else {\r\n      this._hideInputError(inputElement);\r\n    }\r\n  };\r\n\r\n  // Метод проверки на наличие хотя бы одного невалидного поля в форме\r\n  _hasInvalidInput() {\r\n    return this._inputList.some((inputElement) => {\r\n      return !inputElement.validity.valid;\r\n    });\r\n  };\r\n\r\n  // Метод переключения состояния кнопки отправки формы\r\n  _toggleButtonState() {\r\n    if (this._hasInvalidInput()) {\r\n      this._buttonElement.classList.add(this._settingsObject.inactiveButtonClass);\r\n      this._buttonElement.setAttribute('disabled', true);\r\n    } else {\r\n      this._buttonElement.classList.remove(this._settingsObject.inactiveButtonClass);\r\n      this._buttonElement.removeAttribute('disabled');\r\n    };\r\n  };\r\n\r\n}\r\n\r\nexport default FormValidator;\r\n","class Section {\n  constructor({ renderer }, containerSelector) {\n    this._renderer = renderer;\n    this._container = document.querySelector(containerSelector);\n  }\n\n  renderItem(items, userData) {\n\n    const reversedItems = items.reverse();\n\n    reversedItems.forEach((item) => {\n      this._renderer(item, userData);\n    });\n  }\n\n  addItem(item) {\n    this._container.prepend(item);\n  }\n\n}\n\nexport default Section;\n","class Popup {\r\n  constructor(popupSelector) {\r\n    this._element = document.querySelector(popupSelector);\r\n    this._closePopupButton = this._element.querySelector('.popup__icon-close');\r\n    this._handleEscClose = this._handleEscClose.bind(this)\r\n  }\r\n\r\n  open() {\r\n    this._element.classList.add('popup_opened');\r\n    document.addEventListener('keydown', this._handleEscClose);\r\n  }\r\n\r\n  close() {\r\n    this._element.classList.remove('popup_opened');\r\n    document.removeEventListener('keydown', this._handleEscClose);\r\n  }\r\n\r\n  _handleEscClose(evt) {\r\n    if (evt.key === 'Escape') {\r\n      this.close(evt);\r\n    };\r\n  }\r\n\r\n  setEventListeners() {\r\n    this._closePopupButton.addEventListener('click', (evt) => {\r\n      this.close(evt)\r\n    });\r\n\r\n    this._element.addEventListener('click', (evt) => {\r\n        if (evt.target.classList.contains('popup_opened')) {\r\n        this.close(evt.target);\r\n      };\r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default Popup;\r\n","import Popup from \"./Popup.js\";\r\n\r\nclass PopupWithImage extends Popup {\r\n  constructor(popupSelector) {\r\n    super(popupSelector)\r\n\r\n    this._imageIsOpened = this._element.querySelector('.popup__image-is-opened');\r\n    this._descriptionIsOpened = this._element.querySelector('.popup__description-is-opened');\r\n  }\r\n\r\n  open(data) {\r\n    this._imageIsOpened.src = data.link;\r\n    this._imageIsOpened.alt = data.name;\r\n    this._descriptionIsOpened.textContent = data.name;\r\n    super.open();\r\n  }\r\n\r\n}\r\n\r\nexport default PopupWithImage;\r\n","import Popup from \"./Popup.js\";\n\nclass PopupWithForm extends Popup {\n  constructor(popupSelector, hanldeFormSubmit) {\n    super(popupSelector)\n\n    this._form = this._element.querySelector('.popup__form');\n    this._inputs = this._form.querySelectorAll('.popup__input');\n    this.hanldeFormSubmit = hanldeFormSubmit;\n\n  }\n\n  _getInputValues() {\n\n    const res = {};\n\n    for (let input of this._inputs) {\n      res [input.name] = input.value;\n    };\n\n    return res;\n  }\n\n  setEventListeners() {\n    super.setEventListeners();\n    this._form.addEventListener('submit', (evt) => {\n    evt.preventDefault();\n      const data = this._getInputValues();\n      this.hanldeFormSubmit(data);\n      this.close(evt);\n    });\n\n  }\n\n  close() {\n    super.close();\n    this._form.reset();\n  }\n\n}\nexport default PopupWithForm;\n","import PopupWithForm from \"./PopupWithForm.js\";\n\nclass PopupWithСonfirm extends PopupWithForm {\n  constructor(popupSelector, hanldeFormSubmit) {\n    super(popupSelector, hanldeFormSubmit)\n  }\n\n  setSubmitHandler(functionDeleteCard) {\n    this.hanldeFormSubmit = functionDeleteCard;\n  }\n\n}\nexport default PopupWithСonfirm;\n\n\n// import PopupWithForm from \"./PopupWithForm.js\";\n\n// class PopupWithСonfirm extends PopupWithForm {\n//   constructor(popupSelector, hanldeFormSubmit) {\n//     super(popupSelector, hanldeFormSubmit)\n//   }\n\n//   setSubmitHandler(functionDeleteCard) {\n//     this._submit = functionDeleteCard;\n//   }\n\n// }\n// export default PopupWithСonfirm;\n","class UserInfo {\n  constructor(configUserInfo, userId) {\n    this._profileName = document.querySelector(configUserInfo.nameItemSelector);\n    this._profileJob = document.querySelector(configUserInfo.jobItemSelector);\n  }\n\n  getUserInfo() {\n    const userData = {\n      name: this._name,\n      about: this._about,\n      _id: this._id\n    }\n\n    return userData;\n\n  }\n\n  setUserInfo(userData) {\n  if (userData) {\n      this._name = userData.name;\n      this._about = userData.about;\n      this._id = userData._id;\n      // this._profileName.textContent = this._name;\n      // this._profileJob.textContent = this._about;\n      this._renderUserInfo();\n    }\n\n  }\n\n  _renderUserInfo() {\n    this._profileName.textContent = this._name;\n    this._profileJob.textContent = this._about;\n  }\n\n}\n\nexport default UserInfo;\n\n\n\n\n// class UserInfo {\n//   constructor(configUserInfo) {\n//     this._profileName = document.querySelector(configUserInfo.nameItemSelector);\n//     this._profileJob = document.querySelector(configUserInfo.jobItemSelector);\n//   }\n\n//   getUserInfo() {\n\n//     const userData = {\n//       name: this._profileName.textContent,\n//       job: this._profileJob.textContent\n//     }\n\n//     return userData;\n//   }\n\n//   setUserInfo(userData) {\n//     this._profileName.textContent = userData.name;\n//     this._profileJob.textContent = userData.job;\n//   }\n\n// }\n\n\n","// Объявляем объект настроек валидации\nexport const settingsObjectMesto = {\n  formSelector: '.popup__form',\n  inputSelector: '.popup__input',\n  submitButtonSelector: '.popup__button',\n  inactiveButtonClass: 'popup__button_disabled',\n  inputErrorClass: 'popup__input_type_error',\n  errorClass: 'popup__error_visible'\n};\n\n// Массив для добавления начальных карточек\nexport const initialCards = [\n  {\n    name: 'Морская звезда',\n    link: 'https://images.unsplash.com/photo-1610981263015-ef95481e9ffb?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MzN8fHN0YXJmaXNofGVufDB8fDB8fA%3D%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'\n  },\n  {\n    name: 'Рыбы',\n    link: 'https://images.unsplash.com/photo-1611833767698-7a8a336761db?ixid=MnwxMjA3fDB8MHxzZWFyY2h8NzN8fGNvcmFsfGVufDB8fDB8fA%3D%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'\n  },\n  {\n    name: 'Медуза',\n    link: 'https://images.unsplash.com/photo-1549741501-4211de5d3757?ixid=MnwxMjA3fDB8MHxzZWFyY2h8NDl8fGplbGx5ZmlzaHxlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'\n  },\n  {\n    name: 'Кораллы',\n    link: 'https://images.unsplash.com/photo-1589308945435-38c3f99b3824?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTA2fHxjb3JhbHxlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'\n  },\n  {\n    name: 'Океан',\n    link: 'https://images.unsplash.com/photo-1432889490240-84df33d47091?ixid=MnwxMjA3fDB8MHxzZWFyY2h8NTl8fG9jZWFuJTIwbmF0dXJlfGVufDB8fDB8fA%3D%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'\n  },\n  {\n    name: 'Черепаха',\n    link: 'https://images.unsplash.com/photo-1580603474920-aa3332b2c40f?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MjN8fHR1cnRsZXxlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'\n  }\n];\n\n\n// Выбираем в документе галерею, которая будет заполняться карточками\nexport const gallerySelector = '.gallery';\n\n// Выбираем элементы попапы\nexport const сonfirmPopup = document.querySelector('.popup_type_сonfirm');\nexport const editPopup = document.querySelector('.popup_type_edit');\nexport const addPopup = document.querySelector('.popup_type_add');\n\n// Выбираем кнопки открытия попапов\nexport const openEditPopupButton = document.querySelector('.profile__button-edit');\nexport const openAddPopupButton = document.querySelector('.profile-container__button-add');\n\n// Выбираем элемент Форма редактирования\nconst formEditPopup = editPopup.querySelector('.popup__container');\n// Выбираем поле редактирования ввода Имя\nexport const nameInput = formEditPopup.querySelector('.popup__input_name');\n// Выбираем поле редактирования ввода Деятельность\nexport const jobInput = formEditPopup.querySelector('.popup__input_job');\n\n// Выбираем элементы, куда должны быть вставлены значения полей (для редактирования профиля)\nexport const profileName = document.querySelector('.profile__name');\nexport const profileJob = document.querySelector('.profile__job');\n\n// Выбираем элемент Форма добавления новой карточки\nconst formAddPopup = addPopup.querySelector('.popup__container');\n// Выбираем поле ввода добавления новой карточки Название\nexport const titleInput = formAddPopup.querySelector('.popup__input_title');\n// Выбираем поле ввода добавления новой карточки Ссылка\nexport const linkInput = formAddPopup.querySelector('.popup__input_link');\n","import Api from '../components/Api.js';\nimport '../pages/index.css';\nimport Card from '../components/Card.js';\nimport FormValidator from '../components/FormValidator.js';\nimport Section from '../components/Section.js';\nimport PopupWithImage from '../components/PopupWithImage.js';\nimport PopupWithForm from '../components/PopupWithForm.js';\nimport PopupWithСonfirm from '../components/PopupWithСonfirm.js';\nimport UserInfo from '../components/UserInfo.js';\n\nimport { initialCards, settingsObjectMesto, gallerySelector, сonfirmPopup, editPopup, addPopup, openEditPopupButton, openAddPopupButton, nameInput, jobInput, profileName, profileJob, titleInput, linkInput } from '../utils/constants';\nimport Popup from '../components/Popup.js';\n\n// _id: '15e91967d697fa5faaec02f2'\n\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-32',\n  token: '00d03ff0-290d-430c-82a1-6d959f58942a',\n});\n\n// api.getInitialCards()\n//   .then((result) => { // items\n//     cardList.renderItem(result); // items\n//     })\n\n//   .catch((err) => {\n//     console.log('ОШИБКА:', err);\n//   });\n\n// api.getUserData()\n//   .then((result) => { // data\n//     profileUserInfo.setUserInfo(result); // data\n//     })\n\n//   .catch((err) => {\n//     console.log('ОШИБКА:', err);\n//   });\n\nPromise.all([api.getUserData(), api.getInitialCards()])\n  .then(([userData, items]) => {\n    profileUserInfo.setUserInfo(userData)\n    cardList.renderItem(items, userData);\n  })\n\n\n// Создаем экземпляр попапа с формой подтверждения\nconst сonfirmForm = new PopupWithСonfirm(\n  '.popup_type_confirm',\n  function deleteCard(item) { //(()=>{})\n    api.deleteCard(item)\n    .then(result => item.deleteCard(result))\n  }\n  )\nсonfirmForm.setEventListeners();\n\n\n\n\n\n\n// Функция создания карточки\nconst createCard = (item, userData) => {\n  const cardElement = new Card(\n    item,\n    '.template-card',\n    hanldeOpenImageForm,\n    handleOpenConfirmForm,\n\n    function handleCardDelete(item) {\n      сonfirmForm.setSubmitHandler(function deleteCard() { //(()=>{})\n        api.deleteCard(item)\n        .then(result => cardElement.deleteCard(result))\n      });\n    },\n\n    userData\n  );\n  return cardElement.createCard(); // отрисовываем карточку\n}\n\n\n// function getUserDataId() {\n//   Promise.all([api.getUserData(), api.getInitialCards()])\n//   .then(([userData, items]) => userData._id)\n// }\n// console.log('id текущего пользователя', getUserDataId())\n\n\n\n// Создаем экземпляр контейнера для карточек\nconst cardList = new Section({\n  renderer: (item, userData) => {\n    cardList.addItem(createCard(item, userData));\n  }\n}, gallerySelector)\n\n\n// Создаем экземпляр попапа с формой добавления\nconst formAdd = new PopupWithForm(\n  '.popup_type_add',\n\n    function hanldeNewCardFormSubmit(data) {\n      api.createNewCard(\n        {data,\n        userData: profileUserInfo.getUserInfo()._id})\n      .then(result => cardList.addItem(createCard(result)))\n    }\n\n)\nformAdd.setEventListeners();\n\n\n\n// Создаем экземпляр попапа с формой редактирования\nconst formEdit = new PopupWithForm(\n  '.popup_type_edit',\n\n    function hanldeEditFormSubmit(userData) {\n      api.editProfile(userData)\n      .then(result => profileUserInfo.setUserInfo(result))\n    }\n\n)\nformEdit.setEventListeners();\n\n\n// Создаем экземпляр попапа просмотра картинки\nconst imageViewPopup = new PopupWithImage('.popup_type_img');\nimageViewPopup.setEventListeners();\n\n\n// Создаем объект и экземпляр класса с данными пользователя\nconst configUserInfo = {\n  nameItemSelector: '.profile__name',\n  jobItemSelector: '.profile__job'\n}\nconst profileUserInfo = new UserInfo(configUserInfo);\n\n\n// Объявляем функцию открытия попапа редактирования\nfunction openEditPopup() {\n\n  // Формируем объект с данными пользователя\n  const {name, about} = profileUserInfo.getUserInfo();\n\n  // Предарительно обновляем поля ввода\n  nameInput.value = name;\n  jobInput.value = about;\n\n  // Предварительно очищаем ошибки валидации и деактивируем кнопку отправки формы\n  editPopupValidator.resetValidation();\n  // Открываем попап\n  formEdit.open();\n};\n// Передаем в обработчик ссылку на функцию открытия попапа редактирования по клику кнопки Редактировать\nopenEditPopupButton.addEventListener('click', openEditPopup);\n\n// Объявляем функцию открытия попапа добавления\nfunction openAddPopup() {\n\n  // Предварительно очищаем ошибки валидации и деактивируем кнопку отправки формы\n  addPopupValidator.resetValidation();\n  // Открываем попап\n  formAdd.open();\n};\n// Передаем в обработчик ссылку на функцию открытия попапа добавления по клику кнопки Добавить\nopenAddPopupButton.addEventListener('click', openAddPopup);\n\n\n// Обработчик формы для просмотра картинки\nfunction hanldeOpenImageForm(data) {\n\n  //Вызываем функцию открытия попапа Просмотр картинки\n  imageViewPopup.open(data);\n}\n\n// Обработчик открытия попапа подтверждения\nfunction handleOpenConfirmForm() {\n\n  //Вызываем функцию открытия формы подтверждения\n  сonfirmForm.open();\n}\n\n\nconst editPopupValidator = new FormValidator(settingsObjectMesto, editPopup);\neditPopupValidator.enableValidation();\n\nconst addPopupValidator = new FormValidator(settingsObjectMesto, addPopup);\naddPopupValidator.enableValidation();\n"],"names":["Api","baseUrl","token","this","fetch","headers","authorization","then","result","ok","json","Promise","reject","status","data","method","body","JSON","stringify","name","about","link","userData","_id","item","settingsObjectCard","cardSelector","likeButtonSelector","trashButtonSelector","likeButtonActiveClass","cardImageSelector","cardTitleSelector","Card","cardData","templateSelector","handleCardClick","handleTrashButtonClick","handleCardDelete","_item","_title","_image","_templateSelector","_handleCardClick","_handleTrashButtonClick","_handleCardDelete","_userDataId","_ownerId","owner","_itemId","settingsObject","document","querySelector","content","cloneNode","_cardImage","addEventListener","_handleOpenPopup","_likeButton","_handleLikeButton","_trashButton","classList","toggle","remove","_handleTrashButton","_getTemplate","_setEventListeners","src","textContent","alt","FormValidator","formElement","_settingsObject","_formElement","_inputList","Array","from","querySelectorAll","inputSelector","_buttonElement","submitButtonSelector","_toggleButtonState","forEach","inputElement","_checkInputValidity","evt","preventDefault","_hideInputError","errorMessage","errorElement","id","add","inputErrorClass","errorClass","validity","valid","_showInputError","validationMessage","some","_hasInvalidInput","inactiveButtonClass","setAttribute","removeAttribute","Section","containerSelector","renderer","_renderer","_container","items","reverse","prepend","Popup","popupSelector","_element","_closePopupButton","_handleEscClose","bind","removeEventListener","key","close","target","contains","PopupWithImage","_imageIsOpened","_descriptionIsOpened","PopupWithForm","hanldeFormSubmit","_form","_inputs","res","input","value","_getInputValues","reset","PopupWithСonfirm","functionDeleteCard","UserInfo","configUserInfo","userId","_profileName","nameItemSelector","_profileJob","jobItemSelector","_name","_about","_renderUserInfo","settingsObjectMesto","formSelector","editPopup","addPopup","openEditPopupButton","openAddPopupButton","formEditPopup","nameInput","jobInput","formAddPopup","api","all","getUserData","getInitialCards","profileUserInfo","setUserInfo","cardList","renderItem","сonfirmForm","deleteCard","setEventListeners","createCard","cardElement","hanldeOpenImageForm","handleOpenConfirmForm","setSubmitHandler","addItem","formAdd","createNewCard","getUserInfo","formEdit","editProfile","imageViewPopup","open","editPopupValidator","resetValidation","addPopupValidator","enableValidation"],"sourceRoot":""}